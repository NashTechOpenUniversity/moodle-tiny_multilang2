{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands for the plugin logic of the Moodle tiny_multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @author      Iñaki Arenaza <iarenaza@mondragon.edu>\n * @author      Stephan Robotta <stephan.robotta@bfh.ch>\n * @copyright   2015 onwards Iñaki Arenaza & Mondragon Unibertsitatea\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getHighlightCss, isContentToHighlight} from './options';\n\n\n// This class inside a <span> identified the {mlang} tag that is encapsulated in a span.\nconst spanClass = 'class=\"multilang-begin mceNonEditable\"';\n// This is the <span> element with the data attribute.\nconst spanFixedAttrs = '<span ' + spanClass + ' data-mce-contenteditable=\"false\"';\n// The begin span needs the language attributes inside the span and the mlang attribute.\nconst spanMultilangBegin = spanFixedAttrs + ' lang=\"%lang\" xml:lang=\"%lang\">{mlang %lang}</span>';\n// The end span doesn't need information about the used language.\nconst spanMultilangEnd = spanFixedAttrs.replace('begin', 'end') + '>{mlang}</span>';\n// Helper functions\nconst trim = v => v.toString().replace(/^\\s+/, '').replace(/\\s+$/, '');\nconst isNull = a => a === null || a === undefined;\n\n/**\n * Convert {mlang xx} and {mlang} strings to spans, so we can style them visually.\n * Remove superflous whitespace while at it.\n * @param {tinymce.Editor} ed\n * @return {string}\n */\nconst addVisualStyling = function(ed) {\n    let content = ed.getContent();\n\n    // Do not use a variable whether text is already highlighted, do a check for the existing class\n    // because this is safe for many tiny element windows at one page.\n    if (content.indexOf(spanClass) !== -1) {\n        return content;\n    }\n\n    content = content.replace(new RegExp('{\\\\s*mlang\\\\s+([^}]+?)\\\\s*}', 'ig'), function(match, p1) {\n        return spanMultilangBegin.replace(new RegExp('%lang', 'g'), p1);\n    });\n    content = content.replace(new RegExp('{\\\\s*mlang\\\\s*}', 'ig'), spanMultilangEnd);\n\n    return content;\n};\n\n/**\n * Remove the spans we added in _add_visual_styling() to leave only the {mlang xx} and {mlang} tags.\n * Also make sure we lowercase the multilang 'tags'\n * @param {tinymce.Editor} ed\n */\nconst removeVisualStyling = function(ed) {\n    ['begin', 'end'].forEach(function(t) {\n        let nodes = ed.dom.select('span.multilang-' + t);\n        for (let n = 0, l = nodes.length; n < l; n++) {\n            const span = nodes[n];\n            ed.dom.setOuterHTML(span, span.innerHTML.toLowerCase());\n        }\n    });\n};\n\n/**\n * At the current selection lookup for the current node. If we are inside a special span that encapsulates\n * the {lang} tag, then look for the corresponding opening or closing tag, depending on what's set in the\n * search param.\n * @param {tinymce.Editor} ed\n * @param {string} search\n * @return {Node|null} The encapsulating span tag if found.\n */\nconst getHighlightNodeFromSelect = function(ed, search) {\n    let span;\n    ed.dom.getParents(ed.selection.getStart(), elm => {\n        // Are we in a span that highlights the lang tag.\n        if (!isNull(elm.classList)) {\n            // If we are on an opening/closing lang tag, we need to search for the corresponding opening/closing tag.\n            const pair = search === 'begin' ? 'end' : 'begin';\n            if (elm.classList.contains('multilang-' + pair)) {\n                span = elm;\n                do {\n                    // If we look for begin, go back siblings, otherwise look fnext siblings until end is found.\n                    span = search === 'begin' ? span.previousSibling : span.nextSibling;\n                } while (!isNull(span) && (isNull(span.classList) || !span.classList.contains('multilang-' + search)));\n            } else if (elm.classList.contains('multilang-' + search)) {\n                // We are already on the correct tag we search for\n                span = elm;\n            }\n        }\n    });\n    return span;\n};\n\n/**\n * When loading the editor for the first time, add the spans for highlighting the content.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n    if (isContentToHighlight(ed)) {\n        ed.dom.addStyle(getHighlightCss(ed));\n        ed.setContent(addVisualStyling(ed));\n    }\n};\n\n/**\n * When the source code view dialogue is show, we must remove the highlight spans from the editor content\n * and also add them again when the dialogue is closed.\n * @param {tinymce.Editor} ed\n * @param {object} content\n */\nconst onBeforeGetContent = function(ed, content) {\n    if (typeof content.source_view !== 'undefined' && content.source_view === true) {\n        // If the user clicks on 'Cancel' or the close button on the html\n        // source code dialog view, make sure we re-add the visual styling.\n        var onClose = function(ed) {\n            ed.off('close', onClose);\n            ed.setContent(addVisualStyling(ed));\n        };\n        ed.on('CloseWindow', () => {\n            onClose(ed);\n        });\n\n        if (isContentToHighlight(ed)) {\n            removeVisualStyling(ed);\n        }\n    }\n};\n\n/**\n * Add an observer to the onPreProcess event to remove the highlighting spans while saving the content.\n * @param {tinymce.Editor} ed\n * @param {Element} node\n */\nconst onPreProcess = function(ed, node) {\n    if (typeof node.save !== 'undefined' && node.save === true) {\n        if (isContentToHighlight(ed)) {\n            removeVisualStyling(ed);\n        }\n    }\n};\n\n/**\n * Check for key press <del> when something is deleted. If that happens inside a highlight span\n * tag, then remove this tag and the corresponding that open/closes this lang tag.\n * @param {tinymce.Editor} ed\n * @param {Object} event\n */\nconst onDelete = function(ed, event) {\n    if (event.isComposing || (event.keyCode !== 46 && event.keyCode !== 8) || !isContentToHighlight(ed)) {\n        return;\n    }\n    // Key <del> was pressed, to delete some content. Check if we are inside a span for the lang.\n    const begin = getHighlightNodeFromSelect(ed, 'begin');\n    const end = getHighlightNodeFromSelect(ed, 'end');\n    // Only if both, start and end tag are found, then delete the nodes here and prevent the default handling\n    // because the stuff to be deleted is already gone.\n    if (!isNull(begin) && !isNull(end)) {\n        event.preventDefault();\n        ed.dom.remove(begin);\n        ed.dom.remove(end);\n    }\n};\n\n/**\n * The action when a language icon or menu entry is clicked. This adds the {mlang} tags at the current content\n * position or around the selection.\n * @param {tinymce.Editor} ed\n * @param {string} iso\n */\nconst applyLanguage = function(ed, iso) {\n    if (iso === null) {\n        return;\n    }\n    let text = ed.selection.getContent();\n    // Selection is empty, just insert the lang opening and closing tag\n    // together with a space where the user may add the content.\n    if (trim(text) === '') {\n        let newtext;\n        if (isContentToHighlight(ed)) {\n            newtext = spanMultilangBegin.replace(new RegExp('%lang', 'g'), iso) + ' ' + spanMultilangEnd;\n        } else {\n            newtext = '{mlang ' + iso + '}' + ' ' + '{mlang}';\n        }\n        ed.insertContent(newtext);\n        return;\n    }\n    // Selection contains something, we need to place the open and closing lang tags around the selection.\n    // However, there are a few exceptions, e.g. when the selection is inside the lang tag itself. In this case\n    // just change the tag without encapsulating the selection.\n    if (!isContentToHighlight(ed)) {\n        ed.selection.setContent('{mlang ' + iso + '}' + text + '{mlang}');\n        return;\n    }\n    // Syntax highlighting is on. Check if we are on a special span that encapsulates the language tags. Search\n    // for the start span tag.\n    const span = getHighlightNodeFromSelect(ed, 'begin');\n    // If we have a span, then it's the opening tag, and we just replace this one with the new iso.\n    if (!isNull(span)) {\n        ed.dom.setOuterHTML(span, spanMultilangBegin.replace(new RegExp('%lang', 'g'), iso));\n        return;\n    }\n    // Not inside a lang tag, insert a new opening and closing tag with the selection inside.\n    const newtext = spanMultilangBegin.replace(new RegExp('%lang', 'g'), iso) + text + spanMultilangEnd;\n    ed.selection.setContent(newtext);\n};\n\n\nexport {\n    onInit,\n    onBeforeGetContent,\n    onPreProcess,\n    onDelete,\n    applyLanguage\n};"],"names":["spanClass","spanFixedAttrs","spanMultilangBegin","spanMultilangEnd","replace","isNull","a","addVisualStyling","ed","content","getContent","indexOf","RegExp","match","p1","removeVisualStyling","forEach","t","nodes","dom","select","n","l","length","span","setOuterHTML","innerHTML","toLowerCase","getHighlightNodeFromSelect","search","getParents","selection","getStart","elm","classList","pair","contains","previousSibling","nextSibling","addStyle","setContent","source_view","onClose","off","on","node","save","event","isComposing","keyCode","begin","end","preventDefault","remove","iso","text","toString","newtext","insertContent"],"mappings":"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"}