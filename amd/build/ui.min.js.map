{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands for the plugin logic of the Moodle tiny_multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @author      Iñaki Arenaza <iarenaza@mondragon.edu>\n * @author      Stephan Robotta <stephan.robotta@bfh.ch>\n * @copyright   2015 onwards Iñaki Arenaza & Mondragon Unibertsitatea\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getHighlightCss, isContentToHighlight} from \"./options\";\n\n\n// This class inside a <span> identified the {mlang} tag that is encapsulated in a span.\nconst _span_class = 'class=\"multilang-begin mceNonEditable\"';\n// This is the <span> element with the data attribute.\nconst _span_fixed_attrs = '<span ' + _span_class + ' data-mce-contenteditable=\"false\"';\n// The begin span needs the language attributes inside the span and the mlang attribute.\nconst _span_multilang_begin = _span_fixed_attrs + ' lang=\"%lang\" xml:lang=\"%lang\">{mlang %lang}</span>';\n// The end span doesn't need information about the used language.\nconst _span_multilang_end = _span_fixed_attrs.replace('begin', 'end') + '>{mlang}</span>';\n// Helper to trim a string.\nconst trim = v => v.toString().replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n/**\n * Convert {mlang xx} and {mlang} strings to spans, so we can style them visually.\n * Remove superflous whitespace while at it.\n * @param {tinymce.Editor} ed\n */\nconst _add_visual_styling = function(ed) {\n    let content = ed.getContent();\n\n    // Do not use a variable whether text is already highlighted, do a check for the existing class\n    // because this is safe for many tiny element windows at one page.\n    if (content.indexOf(_span_class) !== -1) {\n        return content;\n    }\n\n    content = content.replace(new RegExp('{\\\\s*mlang\\\\s+([^}]+?)\\\\s*}', 'ig'), function(match, p1) {\n        return _span_multilang_begin.replace(new RegExp('%lang', 'g'), p1);\n    });\n    content = content.replace(new RegExp('{\\\\s*mlang\\\\s*}', 'ig'), _span_multilang_end);\n\n    return content;\n};\n\n/**\n * Remove the spans we added in _add_visual_styling() to leave only the {mlang xx} and {mlang} tags.\n * Also make sure we lowercase the multilang 'tags'\n * @param {tinymce.Editor} ed\n */\nconst _remove_visual_styling = function(ed) {\n    ['begin', 'end'].forEach(function (t) {\n      let nodes = ed.dom.select('span.multilang-' + t);\n      for (let n = 0, l = nodes.length; n < l; n++) {\n        const span = nodes[n];\n        ed.dom.setOuterHTML(span, span.innerHTML.toLowerCase());\n      }\n    });\n};\n\n/**\n * When loading the editor for the first time, add the spans for highlighting the content.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n    if (isContentToHighlight(ed)) {\n        ed.dom.addStyle(getHighlightCss(ed));\n        ed.setContent(_add_visual_styling(ed));\n    }\n};\n\n/**\n * When the source code view dialogue is show, we must remove the highlight spans from the editor content\n * and also add them again when the dialogue is closed.\n * @param {tinymce.Editor} ed\n * @param {object} content\n */\nconst onBeforeGetContent = function(ed, content) {\n  if (typeof content.source_view !== 'undefined' && content.source_view === true) {\n    // If the user clicks on 'Cancel' or the close button on the html\n    // source code dialog view, make sure we re-add the visual styling.\n    var onClose = function(ed) {\n      ed.off('close', onClose);\n      ed.setContent(_add_visual_styling(ed));\n    };\n    ed.on('CloseWindow', () => {\n      onClose(ed);\n    });\n\n    if (isContentToHighlight(ed)) {\n        _remove_visual_styling(ed);\n    }\n  }\n};\n\n/**\n * Add an observer to the onPreProcess event to remove the highlighting spans while saving the content.\n * @param {tinymce.Editor} ed\n * @param {Element} node\n */\nconst onPreProcess = function(ed, node) {\n  if (typeof node.save !== 'undefined' && node.save === true) {\n    if (isContentToHighlight(ed)) {\n      _remove_visual_styling(ed);\n    }\n  }\n};\n\n/**\n * The action when a language icon or menu entry is clicked. This adds the multilang tags at the current content\n * position or around the selection.\n * @param {tinymce.Editor} ed\n * @param {string} iso\n */\nconst applyLanguage = function(ed, iso) {\n  if (iso === null) {\n    return;\n  }\n  let text = ed.selection.getContent();\n  let newtext;\n  if (trim(text) !== '') {\n      if (isContentToHighlight(ed)) {\n        newtext = _span_multilang_begin.replace(new RegExp('%lang', 'g'), iso) + text + _span_multilang_end;\n      } else {\n        newtext = '{mlang ' + iso + '}' + text + '{mlang}';\n      }\n      ed.selection.setContent(newtext);\n  } else {\n    if (isContentToHighlight(ed)) {\n      newtext = _span_multilang_begin.replace(new RegExp('%lang', 'g'), iso) + ' ' + _span_multilang_end;\n    } else {\n      newtext = '{mlang ' + iso +'}' + ' ' + '{mlang}';\n    }\n    ed.insertContent(newtext);\n  }\n};\n\n\nexport {\n    onInit,\n    onBeforeGetContent,\n    onPreProcess,\n    applyLanguage\n};"],"names":["_span_class","_span_fixed_attrs","_span_multilang_begin","_span_multilang_end","replace","_add_visual_styling","ed","content","getContent","indexOf","RegExp","match","p1","_remove_visual_styling","forEach","t","nodes","dom","select","n","l","length","span","setOuterHTML","innerHTML","toLowerCase","addStyle","setContent","source_view","onClose","off","on","node","save","iso","newtext","text","selection","toString","insertContent"],"mappings":";;;;;;;;;;MA6BMA,YAAc,yCAEdC,kBAAoB,SAAWD,YAAc,oCAE7CE,sBAAwBD,kBAAoB,sDAE5CE,oBAAsBF,kBAAkBG,QAAQ,QAAS,OAAS,kBASlEC,oBAAsB,SAASC,QAC7BC,QAAUD,GAAGE,oBAIqB,IAAlCD,QAAQE,QAAQT,eAIpBO,QAAUA,QAAQH,QAAQ,IAAIM,OAAO,8BAA+B,OAAO,SAASC,MAAOC,WAChFV,sBAAsBE,QAAQ,IAAIM,OAAO,QAAS,KAAME,OAEnEL,QAAUA,QAAQH,QAAQ,IAAIM,OAAO,kBAAmB,MAAOP,sBANpDI,SAgBTM,uBAAyB,SAASP,KACnC,QAAS,OAAOQ,SAAQ,SAAUC,OAC7BC,MAAQV,GAAGW,IAAIC,OAAO,kBAAoBH,OACzC,IAAII,EAAI,EAAGC,EAAIJ,MAAMK,OAAQF,EAAIC,EAAGD,IAAK,OACtCG,KAAON,MAAMG,GACnBb,GAAGW,IAAIM,aAAaD,KAAMA,KAAKE,UAAUC,oCASlC,SAASnB,KAChB,iCAAqBA,MACrBA,GAAGW,IAAIS,UAAS,4BAAgBpB,KAChCA,GAAGqB,WAAWtB,oBAAoBC,mCAUf,SAASA,GAAIC,iBACH,IAAxBA,QAAQqB,cAAuD,IAAxBrB,QAAQqB,YAAsB,KAG1EC,QAAU,SAASvB,IACrBA,GAAGwB,IAAI,QAASD,SAChBvB,GAAGqB,WAAWtB,oBAAoBC,MAEpCA,GAAGyB,GAAG,eAAe,KACnBF,QAAQvB,QAGN,iCAAqBA,KACrBO,uBAAuBP,4BAUV,SAASA,GAAI0B,WACP,IAAdA,KAAKC,OAAsC,IAAdD,KAAKC,OACvC,iCAAqB3B,KACvBO,uBAAuBP,4BAWP,SAASA,GAAI4B,QACrB,OAARA,eAIAC,QADAC,KAAO9B,GAAG+B,UAAU7B,aAEL,KAAV4B,KAnGSE,WAAWlC,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,KAqG3D+B,SADE,iCAAqB7B,IACbJ,sBAAsBE,QAAQ,IAAIM,OAAO,QAAS,KAAMwB,KAAOE,KAAOjC,oBAEtE,UAAY+B,IAAM,IAAME,KAAO,UAE3C9B,GAAG+B,UAAUV,WAAWQ,WAGxBA,SADE,iCAAqB7B,IACbJ,sBAAsBE,QAAQ,IAAIM,OAAO,QAAS,KAAMwB,KAAO,IAAM/B,oBAErE,UAAY+B,IAAZ,YAEZ5B,GAAGiC,cAAcJ"}