{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Options helper for multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @author      Iñaki Arenaza <iarenaza@mondragon.edu>\n * @author      Stephan Robotta <stephan.robotta@bfh.ch>\n * @copyright   2015 onwards Iñaki Arenaza & Mondragon Unibertsitatea\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\nconst languages = getPluginOptionName(pluginName, 'languages');\nconst mlangfilter = getPluginOptionName(pluginName, 'mlangfilter');\nconst fallbackspan = getPluginOptionName(pluginName, 'fallbackspantag');\nconst showalllangs = getPluginOptionName(pluginName, 'showalllangs');\nconst highlight = getPluginOptionName(pluginName, 'highlight');\nconst highlightcss = getPluginOptionName(pluginName, 'css');\nconst addlanguage = getPluginOptionName(pluginName, 'addlanguage');\nconst languageoptions = getPluginOptionName(pluginName, 'optionlanguages');\n\n/**\n * Register the options for the Tiny Equation plugin.\n *\n * @param {tinymce.Editor} editor\n */\nexport const register = (editor) => {\n    editor.options.register(languages, {\n        processor: 'Array',\n        \"default\": [],\n    });\n\n    editor.options.register(mlangfilter, {\n        processor: 'boolean',\n        \"default\": false,\n    });\n\n    editor.options.register(showalllangs, {\n        processor: 'boolean',\n        \"default\": false,\n    });\n\n    editor.options.register(fallbackspan, {\n        processor: 'boolean',\n        \"default\": false,\n    });\n\n    editor.options.register(highlight, {\n        processor: 'boolean',\n        \"default\": false,\n    });\n\n    editor.options.register(highlightcss, {\n        processor: 'string',\n       \"default\": '',\n    });\n\n    editor.options.register(addlanguage, {\n        processor: 'boolean',\n        \"default\": false,\n    });\n\n    editor.options.register(languageoptions, {\n        processor: 'Array',\n        \"default\": [],\n    });\n};\n\n/**\n * Get the list of languages that are used for the translation button/menu item.\n *\n * @param {tinymce.Editor} editor\n * @returns {Array}\n */\nexport const getLanguageList = (editor) => editor.options.get(languages);\n\n/**\n * Get the information whether the multilang2 filter is installed or not.\n * @param {tinymce.Editor} editor\n * @return {boolean}\n */\nexport const mlangFilterExists = (editor) => editor.options.get(mlangfilter);\n\n/**\n * Get the option whether to show all languages or not.\n *\n * @param {tinymce.Editor} editor\n * @returns {boolean}\n */\nexport const showAllLanguages = (editor) => editor.options.get(showalllangs);\n\n/**\n * Get the defined option whether the classic <span class=\"multilang\" lang=\"XX\"> are supported as well.\n *\n * @param {tinymce.Editor} editor\n * @returns {boolean}\n */\nexport const isFallbackSpanTag = (editor) => editor.options.get(fallbackspan);\n\n/**\n * Get the defined option whether to highlight the language dependent content blocks.\n *\n * @param {tinymce.Editor} editor\n * @returns {boolean}\n */\nexport const isContentToHighlight = (editor) => editor.options.get(highlight);\n\n/**\n * Get the highlight css in case the language dependent block are supposed to be emphasized.\n *\n * @param {tinymce.Editor} editor\n * @returns {string}\n */\nexport const getHighlightCss = (editor) => editor.options.get(highlightcss);\n\n/**\n * Get the defined option whether to add language manually.\n *\n * @param {tinymce.Editor} editor\n * @returns {boolean}\n */\nexport const isAddLanguage = (editor) => editor.options.get(addlanguage);\n\n/**\n * Get the language options.\n *\n * @param {tinymce.Editor} editor\n * @returns {Array}\n */\nexport const getLanguageOptions = (editor) => editor.options.get(languageoptions);\n\n/**\n * Returns an array of all the languages that have the direction right to left (RTL).\n *\n * @returns {string[]} An array of language codes representing RTL languages.\n */\nexport const getRTLLanguages = () => ['ar', 'az', 'dv', 'he', 'ku', 'fa', 'ur'];\n"],"names":["languages","pluginName","mlangfilter","fallbackspan","showalllangs","highlight","highlightcss","addlanguage","languageoptions","editor","options","register","processor","get"],"mappings":";;;;;;;;;;MA4BMA,WAAY,gCAAoBC,mBAAY,aAC5CC,aAAc,gCAAoBD,mBAAY,eAC9CE,cAAe,gCAAoBF,mBAAY,mBAC/CG,cAAe,gCAAoBH,mBAAY,gBAC/CI,WAAY,gCAAoBJ,mBAAY,aAC5CK,cAAe,gCAAoBL,mBAAY,OAC/CM,aAAc,gCAAoBN,mBAAY,eAC9CO,iBAAkB,gCAAoBP,mBAAY,qCAO/BQ,SACrBA,OAAOC,QAAQC,SAASX,UAAW,CAC/BY,UAAW,gBACA,KAGfH,OAAOC,QAAQC,SAAST,YAAa,CACjCU,UAAW,mBACA,IAGfH,OAAOC,QAAQC,SAASP,aAAc,CAClCQ,UAAW,mBACA,IAGfH,OAAOC,QAAQC,SAASR,aAAc,CAClCS,UAAW,mBACA,IAGfH,OAAOC,QAAQC,SAASN,UAAW,CAC/BO,UAAW,mBACA,IAGfH,OAAOC,QAAQC,SAASL,aAAc,CAClCM,UAAW,iBACD,KAGdH,OAAOC,QAAQC,SAASJ,YAAa,CACjCK,UAAW,mBACA,IAGfH,OAAOC,QAAQC,SAASH,gBAAiB,CACrCI,UAAW,gBACA,+BAUaH,QAAWA,OAAOC,QAAQG,IAAIb,sCAO5BS,QAAWA,OAAOC,QAAQG,IAAIX,uCAQ/BO,QAAWA,OAAOC,QAAQG,IAAIT,yCAQ7BK,QAAWA,OAAOC,QAAQG,IAAIV,4CAQ3BM,QAAWA,OAAOC,QAAQG,IAAIR,oCAQnCI,QAAWA,OAAOC,QAAQG,IAAIP,qCAQhCG,QAAWA,OAAOC,QAAQG,IAAIN,yCAQzBE,QAAWA,OAAOC,QAAQG,IAAIL,0CAOlC,IAAM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM"}