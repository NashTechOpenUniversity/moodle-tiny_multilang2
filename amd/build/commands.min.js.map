{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getLanguageList} from './options';\nimport {component} from './common';\nimport {get_strings as getStrings} from 'core/str';\nimport {applyLanguage} from './ui';\n\n/**\n * Get the setup function for the button.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        tooltip,\n    ] = await getStrings(['multilang2:language', 'multilang2:desc'].map((key) => ({key, component})));\n\n  return (editor) => {\n\n    const languageList = getLanguageList(editor);\n    // If there is just one language, we don't need the plugin.\n    if (languageList.length < 2) {\n      return;\n    }\n\n    editor.ui.registry.addSplitButton(component, {\n      icon: 'language',\n      tooltip: tooltip,\n      fetch: () => languageList.map((lang) => ({\n            type: 'choiceitem',\n            icon: 'language',\n            value: lang.iso,\n            text: lang.label,\n      })),\n      onAction: () => {\n        applyLanguage(editor, null);\n      },\n      onItemAction: (_splitButtonApi, value) => {\n        applyLanguage(editor, value);\n      }\n    });\n\n    editor.ui.registry.addNestedMenuItem(component, {\n        icon: 'language',\n        text: buttonText,\n        getSubmenuItems: () => languageList.map((lang) => ({\n            type: 'menuitem',\n            text: lang.label,\n            onAction: () => {\n              applyLanguage(editor, lang.iso);\n            },\n        }))\n    });\n  };\n};\n"],"names":["async","buttonText","tooltip","map","key","component","editor","languageList","length","ui","registry","addSplitButton","icon","fetch","lang","type","value","iso","text","label","onAction","onItemAction","_splitButtonApi","addNestedMenuItem","getSubmenuItems"],"mappings":"wOAoCwBA,gBAEhBC,WACAC,eACM,oBAAW,CAAC,sBAAuB,mBAAmBC,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,8BAE9EC,eAEAC,cAAe,4BAAgBD,QAEjCC,aAAaC,OAAS,IAI1BF,OAAOG,GAAGC,SAASC,eAAeN,kBAAW,CAC3CO,KAAM,WACNV,QAASA,QACTW,MAAO,IAAMN,aAAaJ,KAAKW,QACzBC,KAAM,aACNH,KAAM,WACNI,MAAOF,KAAKG,IACZC,KAAMJ,KAAKK,UAEjBC,SAAU,2BACMd,OAAQ,OAExBe,aAAc,CAACC,gBAAiBN,+BAChBV,OAAQU,UAI1BV,OAAOG,GAAGC,SAASa,kBAAkBlB,kBAAW,CAC5CO,KAAM,WACNM,KAAMjB,WACNuB,gBAAiB,IAAMjB,aAAaJ,KAAKW,QACrCC,KAAM,WACNG,KAAMJ,KAAKK,MACXC,SAAU,2BACMd,OAAQQ,KAAKG"}