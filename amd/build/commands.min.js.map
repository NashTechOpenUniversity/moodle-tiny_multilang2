{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_multilang2 plugin.\n *\n * @module      tiny_multilang2\n * @author      Iñaki Arenaza <iarenaza@mondragon.edu>\n * @author      Stephan Robotta <stephan.robotta@bfh.ch>\n * @copyright   2015 onwards Iñaki Arenaza & Mondragon Unibertsitatea\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getLanguageList} from './options';\nimport {component} from './common';\nimport {get_strings as getStrings} from 'core/str';\nimport {applyLanguage, onInit, onBeforeGetContent, onPreProcess, onDelete} from './ui';\n\n/**\n * Get the setup function for the button and the menu entry.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        tooltip,\n    ] = await getStrings(['multilang2:language', 'multilang2:desc'].map((key) => ({key, component})));\n\n    return (editor) => {\n\n        const languageList = getLanguageList(editor);\n        // If there is just one language, we don't need the plugin.\n        if (languageList.length < 2) {\n            return;\n        }\n\n        editor.ui.registry.addSplitButton(component, {\n            icon: 'language',\n            tooltip: tooltip,\n            fetch: function(callback) {\n                const items = languageList.map((lang) => ({\n                    type: 'choiceitem',\n                    value: lang.iso,\n                    text: lang.label,\n                }));\n                callback(items);\n            },\n            onAction: () => {\n                applyLanguage(editor, null);\n            },\n            onItemAction: (_splitButtonApi, value) => {\n                applyLanguage(editor, value);\n            }\n        });\n\n        editor.ui.registry.addNestedMenuItem(component, {\n            icon: 'language',\n            text: buttonText,\n            getSubmenuItems: () => languageList.map((lang) => ({\n                type: 'menuitem',\n                text: lang.label,\n                onAction: () => {\n                    applyLanguage(editor, lang.iso);\n                },\n            }))\n        });\n\n        for (const lang of languageList) {\n            editor.ui.registry.addButton(component + '_' + lang.iso, {\n                text: lang.iso,\n                tooltip: lang.label,\n                onAction: () => {\n                    applyLanguage(editor, lang.iso);\n                }\n            });\n        }\n        editor.ui.registry.addContextToolbar(component, {\n            predicate: function(node) {\n                return node.classList.contains('multilang-begin') || node.classList.contains('multilang-end');\n            },\n            items: languageList.map((lang) => (component + '_' + lang.iso)).join(' '),\n            position: 'node',\n            scope: 'node'\n        });\n\n        editor.on('init', () => {\n            onInit(editor);\n        });\n        editor.on('BeforeGetContent', (format) => {\n            onBeforeGetContent(editor, format);\n        });\n        editor.on('PreProcess', (node) => {\n            onPreProcess(editor, node);\n        });\n        editor.on('keydown', (event) => {\n            onDelete(editor, event);\n        });\n    };\n};\n"],"names":["async","buttonText","tooltip","map","key","component","editor","languageList","length","ui","registry","addSplitButton","icon","fetch","callback","lang","type","value","iso","text","label","onAction","onItemAction","_splitButtonApi","addNestedMenuItem","getSubmenuItems","addButton","addContextToolbar","predicate","node","classList","contains","items","join","position","scope","on","format","event"],"mappings":"wOAsCwBA,gBAEhBC,WACAC,eACM,oBAAW,CAAC,sBAAuB,mBAAmBC,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,8BAE5EC,eAEEC,cAAe,4BAAgBD,aAEjCC,aAAaC,OAAS,IAI1BF,OAAOG,GAAGC,SAASC,eAAeN,kBAAW,CACzCO,KAAM,WACNV,QAASA,QACTW,MAAO,SAASC,UAMZA,SALcP,aAAaJ,KAAKY,QAC5BC,KAAM,aACNC,MAAOF,KAAKG,IACZC,KAAMJ,KAAKK,YAInBC,SAAU,2BACQf,OAAQ,OAE1BgB,aAAc,CAACC,gBAAiBN,+BACdX,OAAQW,UAI9BX,OAAOG,GAAGC,SAASc,kBAAkBnB,kBAAW,CAC5CO,KAAM,WACNO,KAAMlB,WACNwB,gBAAiB,IAAMlB,aAAaJ,KAAKY,QACrCC,KAAM,WACNG,KAAMJ,KAAKK,MACXC,SAAU,2BACQf,OAAQS,KAAKG,gBAKlC,MAAMH,QAAQR,aACfD,OAAOG,GAAGC,SAASgB,UAAUrB,kBAAY,IAAMU,KAAKG,IAAK,CACrDC,KAAMJ,KAAKG,IACXhB,QAASa,KAAKK,MACdC,SAAU,2BACQf,OAAQS,KAAKG,QAIvCZ,OAAOG,GAAGC,SAASiB,kBAAkBtB,kBAAW,CAC5CuB,UAAW,SAASC,aACTA,KAAKC,UAAUC,SAAS,oBAAsBF,KAAKC,UAAUC,SAAS,kBAEjFC,MAAOzB,aAAaJ,KAAKY,MAAUV,kBAAY,IAAMU,KAAKG,MAAMe,KAAK,KACrEC,SAAU,OACVC,MAAO,SAGX7B,OAAO8B,GAAG,QAAQ,oBACP9B,WAEXA,OAAO8B,GAAG,oBAAqBC,oCACR/B,OAAQ+B,WAE/B/B,OAAO8B,GAAG,cAAeP,4BACRvB,OAAQuB,SAEzBvB,OAAO8B,GAAG,WAAYE,yBACThC,OAAQgC"}